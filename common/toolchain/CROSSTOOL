# Adapted from the CROSSTOOL shipped with bazel.

major_version: "local"
minor_version: ""
default_target_cpu: "same_as_host"

default_toolchain {
  cpu: "k8"
  toolchain_identifier: "local_linux"
}

toolchain {
  abi_version: "local"
  abi_libc_version: "local"
  builtin_sysroot: ""
  compiler: "compiler"
  host_system_name: "local"
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  target_libc: "local"
  target_cpu: "k8"
  target_system_name: "local"
  toolchain_identifier: "local_linux"

  tool_path { name: "ar" path: "/usr/bin/ar" }
  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
  tool_path { name: "cpp" path: "/usr/bin/clang-4.0" }
  tool_path { name: "dwp" path: "/usr/bin/dwp" }
  tool_path { name: "gcc" path: "/usr/bin/clang-4.0" }

  cxx_builtin_include_directory: "/usr/lib/llvm-4.0/lib/clang/4.0.0/include"
  cxx_builtin_include_directory: "/usr/lib/clang/4.0.0/include"
  cxx_builtin_include_directory: "/usr/include"

  tool_path { name: "gcov" path: "/usr/bin/llvm-gcov.sh" }

  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "/usr/bin/ld" }

  tool_path { name: "nm" path: "/usr/bin/nm" }
  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
  tool_path { name: "objdump" path: "/usr/bin/objdump" }
  tool_path { name: "strip" path: "/usr/bin/strip" }

  feature {
    name: "default_compile_flags"
    flag_set {
      action: "assemble"
      action: "preprocess-assemble"
      action: "linkstamp-compile"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-module-compile"
      action: "c++-module-codegen"
      action: "lto-backend"
      action: "clif-match"
      flag_group {
        flag: "-Wall"
        flag: "-fno-omit-frame-pointer"
        flag: "-fPIC"
        # flag: "-Wunused-but-set-parameter"
        # flag: "-Wno-free-nonheap-object"
        
        # Warnings.
        flag: "-Wdeprecated-declarations"
        flag: "-Wno-error=deprecated-declarations"
        flag: "-Wmissing-field-initializers"
        flag: "-Wswitch"
        flag: "-Wthread-safety"
        flag: "-Wunused-parameter"
        flag: "-Wbitfield-constant-conversion"
        flag: "-Wno-error=bitfield-constant-conversion"
        flag: "-Wparentheses"
        flag: "-Wdeprecated-register"
        flag: "-Wunused-local-typedef"
        flag: "-Wdelete-non-virtual-dtor"
        flag: "-Wno-sign-compare"

        # Security hardening on by default.
        # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
        # We need to undef it before redefining it as some distributions now have
        # it enabled by default.
        flag: "-U_FORTIFY_SOURCE"
        flag: "-D_FORTIFY_SOURCE=1"
        flag: "-fstack-protector"
      }
    }
    flag_set {
      action: "assemble"
      action: "preprocess-assemble"
      action: "linkstamp-compile"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-module-compile"
      action: "c++-module-codegen"
      action: "lto-backend"
      action: "clif-match"
      flag_group {
        flag: "-g"
      }
      with_feature {
        feature: "dbg"
      }
    }
    flag_set {
      action: "assemble"
      action: "preprocess-assemble"
      action: "linkstamp-compile"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-module-compile"
      action: "c++-module-codegen"
      action: "lto-backend"
      action: "clif-match"
      flag_group {
        # No debug symbols.
        # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
        # even generally? However, that can't happen here, as it requires special
        # handling in Bazel.
        flag: "-g0"

        # Conservative choice for -O
        # -O3 can increase binary size and even slow down the resulting binaries.
        # Profile first and / or use FDO if you need better performance than this.
        flag: "-O2"

        # Disable assertions
        flag: "-DNDEBUG"

        # Removal of unused code and data at link time (can this increase binary size in some cases?).
        flag: "-ffunction-sections"
        flag: "-fdata-sections"
        # flag: "-Wl,--gc-sections"

        # Tune for Intel Skylake CPUs and all newer CPUs
        flag: "-mtune=skylake"
        flag: "-march=skylake"
      }
      with_feature {
        feature: "opt"
      }
    }
    flag_set {
      action: "linkstamp-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-module-compile"
      action: "c++-module-codegen"
      action: "lto-backend"
      action: "clif-match"
      flag_group {
        flag: "-std=c++14"
      }
    }
    enabled: true
  }

  feature {
    name: "unfiltered_compile_flags"
    flag_set {
      action: "assemble"
      action: "preprocess-assemble"
      action: "linkstamp-compile"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-module-compile"
      action: "c++-module-codegen"
      action: "lto-backend"
      action: "clif-match"
      flag_group {
        # Make C++ compilation deterministic. Use linkstamping instead of these
        # compiler symbols.
        flag: "-no-canonical-prefixes"
        flag: "-Wno-builtin-macro-redefined"
        flag: "-D__DATE__=\"redacted\""
        flag: "-D__TIMESTAMP__=\"redacted\""
        flag: "-D__TIME__=\"redacted\""
      }
    }
    enabled: true
  }

  feature {
    name: "default_link_flags"
    flag_set {
      action: "c++-link-executable"
      action: "c++-link-dynamic-library"
      action: "c++-link-nodeps-dynamic-library"
      flag_group {
        flag: "-fno-builtin-malloc"
        flag: "-fno-builtin-calloc"
        flag: "-fno-builtin-realloc"
        flag: "-fno-builtin-free"
        flag: "-lstdc++"
        flag: "-lm"
        flag: "-no-canonical-prefixes"
        flag: "-Wl,-z,relro,-z,now"
      }
    }
    flag_set {
      action: "c++-link-executable"
      action: "c++-link-dynamic-library"
      action: "c++-link-nodeps-dynamic-library"
      flag_group {
        flag: "-Wl,--gc-sections"
      }
      with_feature {
        feature: "opt"
      }
    }
    enabled: true
  }

  feature {
    # NOTE(yiming): This is 'needsPic' in the old syntax. It doesn't mean that we don't need PIC
    # when we set this value to false. However, if we set it to 'true', then each .cc file will be
    # compiled into two versions. One supports PIC, and the other doesn't, which is a big waste.
    # So, we just turn this off, and add '-fPIC' in the compiler arguments.
    name: "supports_pic"
    enabled: false
  }

  feature {
    name: "objcopy_embed_flags"
    flag_set {
      action: "objcopy_embed_data"
      flag_group {
        flag: "-I"
        flag: "binary"
      }
    }
    enabled: true
  }

  feature {
    name: "opt"
  }

  feature {
    name: "dbg"
  }

  feature {
    name: "static_linking_mode"
    enabled: true
  }
}
